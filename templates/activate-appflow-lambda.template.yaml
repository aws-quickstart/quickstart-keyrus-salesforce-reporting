AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation Template for LambdaFunction for activate a AppflowLogs (qs-1t7ksiu7p)
Metadata:
  QSLint:
    Exclusions: [ W9002, W9003, W9004, W9006 ]
  QuickStartDocumentation:
    EntrypointName: "Launch AppFlow Lamda"
    Order: 8
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Basic configuration
        Parameters:
          - AppFlowName
    ParameterLabels:
      AppFlowName:
        Default: Name of the flow
Parameters:
  AppFlowName:
    Description: "Name of the flow to activate"
    Type: String
    Default: salesforce-appflow
Resources:
  LambdaExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Principal:
              Service:
              - appflow.amazonaws.com
              - lambda.amazonaws.com
              - redshift.amazonaws.com
            Action:
            - sts:AssumeRole
        Path: "/"
        ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonS3ObjectLambdaExecutionRolePolicy
        - !Sub arn:${AWS::Partition}:iam::aws:policy/SecretsManagerReadWrite
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonAppFlowFullAccess
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonS3FullAccess

  ActivateAppFlowOnStart:
    Type: AWS::Lambda::Function
    DependsOn: LambdaExecutionRole
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.7
      Timeout: 180
      Code:
        ZipFile: !Sub |
          import json
          import time
          import boto3
          import cfnresponse


          def describe_connector(event, context):
           response = client.describe_connectors( connectorTypes=[])
           return {'response': response['connectorConfigurations']}

          def handler(event, context):
            try:
              client = boto3.client('appflow')
              response = client.start_flow (
                flowName="${AppFlowName}"
              )
              responseData = {}
              responseValue = 120
              responseData['Data'] = responseValue
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
              responseBody = {'statusCode': 200 , 'Status': 'SUCCESS' }
              responseBody = json.dumps(responseBody)
              return responseBody
            except Exception as e:
              print(e)

  Primerinvoke:
    Type: AWS::CloudFormation::CustomResource
    DependsOn: ActivateAppFlowOnStart
    Version: "1.0"
    Properties:
      ServiceToken: !GetAtt ActivateAppFlowOnStart.Arn



