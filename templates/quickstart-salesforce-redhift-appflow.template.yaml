AWSTemplateFormatVersion: 2010-09-09
Description: Redshift Stack
Parameters:

  ## Database Settings ##
  DatabaseName:
    Default: dev
    Type: String
    Description: Database name
  MasterUsername:
    Type: String
    Description: Master user name for Redshift
    Default: keyrus
  MasterUserPassword:
    Default: Keyrus-US-2022
    Description: Master password for Redshift (used mixed case and numbers) Make Sure this is solid something with special chars.
    Type: String
    NoEcho: 'true'
    MinLength: '8'
    MaxLength: '64'
    AllowedPattern: >-
     ^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?!._*[@/\\\"']).*$
    ConstraintDescription: >-
     Enter alphanumeric password for the master user. The password must contain 8 to 64 printable ASCII characters, excluding: /, ", \'', \ and @. It must contain one uppercase letter, one lowercase letter, and one number.
    
  ## End Database Settings ## 
  
  ## Node Setup ## 

  NumberOfNodes:
    Description: >-
      The number of compute nodes in the cluster. For multi-node clusters, the NumberOfNodes parameter must be greater than 1.
    Type: Number
    Default: '1'
  NodeType:
    Description: The type of node to be provisioned
    Type: String
    Default: dc2.large 
    AllowedValues:
      - dc2.large
      - dc2.8xlarge
      - ds2.xlarge
      - ds2.8xlarge

  ## End Node Setup ## 

  ## Encryption Settings ES ## 

  EncryptionAtRest:
    Description: Enables or disables encryption at rest of the Redshift database.
    Type: String
    Default: 'false'
    AllowedValues:
      - true
      - false
    ConstraintDescription: must be true or false.

  kmskey:
    Description: The existing KMS key ID for encrypting Redshift database at-rest ( Add if EncryptionAtRest enabled ).
    Type: String
    Default: ''

  ## End ES ## 


  ## S3 Settings ## 

  S3BucketName:
    Type: String
    Description: S3 data bucket name

  S3BucketPrefix:
    Description: The Prefix name for the S3 Bucket 
    Type: String
    Default: 'Logs'

  EnableLoggingToS3:
    Default: 'true'
    Type: String
    AllowedValues:
      - true
      - false
    Description: Enables or disables logging to an S3 bucket.  To enable logging, select True.

  ConnectionModeVal:
    Default: 'Public'
    Type: String
    AllowedValues:
      - 'Public'
      - 'Private'
    Description: Connection Mode for Connection Profile

  ConnectorProfileName:
    Default: 'Keyrus'
    Type: String
    Description: Connection Profile Name

  ConnectorType:
    Default: 'Redshift'
    Type: String
    AllowedValues:
      - 'Redshift'
      - 'Salesforce'
    Description: Connection Profile Type

  ## End S3 S3S ## 
  
Conditions:
  IsGovCloud: !Equals [!Ref 'AWS::Region', 'us-gov-west-1']
  RedshiftSingleNodeClusterCondition:
    Fn::Equals:
    - Ref: NumberOfNodes
    - '1'
  IsEncryptionAtRest: !Equals [!Ref EncryptionAtRest, 'true']
  IsEnableLoggingToS3: !And
    - !Equals [!Ref EnableLoggingToS3, 'true']
    - !Not [!Condition IsGovCloud]

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.1.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  ## Public Subnets ## 
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.10.0/24
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the first AZ in the list       
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Public-A
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.20.0/24
      AvailabilityZone: !Select [ 1, !GetAZs ]    # Get the second AZ in the list 
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Public-B
  ## END Public Subnets ## 

  ## Route Tables ## 
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public
  PublicRoute1:   # Public route table has direct routing to IGW:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway 
  # Attach the public subnets to public route tables,
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable
  
  ## End RT's ##

  ## S3 Bucket ## 

  RedshiftLoggingS3Bucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Retain
    Properties:
      BucketName: !Ref S3BucketName
      LifecycleConfiguration:
        Rules:
        - Id: RedshiftLogsArchivingToGlacier
          Status: Enabled
          ExpirationInDays: '30'
          Transitions:
            - TransitionInDays: '14'
              StorageClass: Glacier

  ## S3 Bucket End ##

  ## Lambda ## 

  LambdaRedShiftRunOnStart:
    Type: AWS::Lambda::Function
    DependsOn: RedshiftCluster
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.7
      Timeout: 180
      Code:
        ZipFile: !Sub |
          import json 
          import time 
          import unicodedata
          import traceback
          import sys
          import cfnresponse
          from pip._internal import main
          main(['install', '-I', '-q', 'redshift_connector', '--target', '/tmp/', '--no-cache-dir', '--disable-pip-version-check'])
          sys.path.insert(0,'/tmp/')
          import redshift_connector

          def handler(event, context):
            ## Everything below try block is indented inside it 
            conn = redshift_connector.connect(
              host="${RedshiftCluster.Endpoint.Address}",
              database="${DatabaseName}",
              user="${MasterUsername}",
              password="${MasterUserPassword}"
            )
            cur: redshift_connector.Cursor = conn.cursor()
            cur.execute("create schema ods")
            conn.commit() 
            cur.execute("""
                CREATE TABLE IF NOT EXISTS ods.account
                (
                Name                    varchar(255),
                AccountNumber           varchar(40),
                OwnerId                 varchar(18),
                Site                    varchar(80),
                AccountSource           varchar(255),
                AnnualRevenue           decimal(18, 2),
                CreatedById             varchar(18),
                Jigsaw                  varchar(18),
                Description             Text,
                NumberOfEmployees       decimal(8, 0),
                Fax                     varchar(255),
                Industry                varchar(255),
                LastModifiedById        varchar(18),
                Ownership               varchar(255),
                ParentId                varchar(18),
                Phone                   varchar(50),
                Rating                  varchar(255),
                Sic                     varchar(10),
                SicDesc                 varchar(80),
                TickerSymbol            varchar(20),
                Type                    varchar(255),
                Website                 varchar(255),
                Id                      varchar(18),
                Deleted                 boolean,
                MasterRecordId          varchar(20),
                BillingStreet           varchar(255),
                BillingCity             varchar(255),
                BillingStateProvince    varchar(255),
                BillingZipPostalCode    varchar(255),
                BillingCountry          varchar(255),
                BillingLatitude         decimal(11, 8),
                BillingLongitude        decimal(11, 8),
                BillingGeocodeAccuracy  varchar(255),
                BillingAddress          varchar(255),
                ShippingStreet          varchar(255),
                ShippingCity            varchar(255),
                ShippingStateProvince   varchar(255),
                ShippingZipPostalCode   varchar(255),
                ShippingCountry         varchar(255),
                ShippingLatitude        decimal(11, 8),
                ShippingLongitude       decimal(11, 8),
                ShippingGeocodeAccuracy varchar(255),
                ShippingAddress         varchar(255),
                PhotoURL                varchar(255),
                CreatedDate             timestamp,
                LastModifiedDate        timestamp,
                SystemModstamp          varchar(255),
                LastActivity            varchar(255),
                LastViewedDate          timestamp,
                LastReferencedDate      timestamp,
                DatacomKey              varchar(255),
                JigsawCompanyId         varchar(255),
                SICDescription          Text
                )
            """)
            conn.commit() 
            cur.execute(""" 
                CREATE TABLE IF NOT EXISTS ods.contact
                (
                ContactID                  varchar(18),
                Deleted                    boolean,
                MasterRecordID             varchar(255),
                AccountID                  varchar(255),
                LastName                   varchar(255),
                FirstName                  varchar(255),
                Salutation                 varchar(50),
                FullName                   varchar(255),
                OtherStreet                varchar(255),
                OtherCity                  varchar(255),
                OtherStateProvince         varchar(255),
                OtherZipPostalCode         varchar(20),
                OtherCountry               varchar(255),
                OtherLatitude              decimal(11, 8),
                OtherLongitude             decimal(11, 8),
                OtherGeocodeAccuracy       varchar(100),
                OtherAddress               varchar(255),
                MailingStreet              varchar(255),
                MailingCity                varchar(255),
                MailingStateProvince       varchar(255),
                MailingZipPostalCode       varchar(255),
                MailingCountry             varchar(255),
                MailingLatitude            decimal(11, 8),
                MailingLongitude           decimal(11, 8),
                MailingGeocodeAccuracy     varchar(100),
                MailingAddress             varchar(255),
                BusinessPhone              varchar(50),
                BusinessFax                varchar(50),
                MobilePhone                varchar(50),
                HomePhone                  varchar(50),
                OtherPhone                 varchar(50),
                AsstPhone                  varchar(50),
                ReportsToID                varchar(255),
                Email                      varchar(255),
                Title                      varchar(255),
                Department                 varchar(255),
                AssistantsName             varchar(255),
                LeadSource                 varchar(255),
                Birthdate                  date,
                ContactDescription         varchar(max),
                OwnerID                    varchar(255),
                CreatedDate                timestamp,
                CreatedByID                varchar(255),
                LastModifiedDate           timestamp,
                LastModifiedByID           varchar(255),
                SystemModstamp             timestamp,
                LastActivity               date,
                LastStayinTouchRequestDate timestamp,
                LastStayinTouchSaveDate    timestamp,
                LastViewedDate             timestamp,
                LastReferencedDate         timestamp,
                EmailBouncedReason         varchar(300),
                EmailBouncedDate           timestamp,
                IsEmailBounced             boolean,
                PhotoURL                   varchar(255),
                DatacomKey                 varchar(50),
                JigsawContactID            varchar(50),
                IndividualID               varchar(50)
                )         
                        
            """)
            
            conn.commit() 
            cur.execute(""" 
                CREATE TABLE IF NOT EXISTS ods.case
                (
                CaseID             varchar(18),
                Deleted            boolean,
                MasterRecordID     varchar(18),
                CaseNumber         varchar(255),
                ContactID          varchar(18),
                AccountID          varchar(18),
                ParentCaseID       varchar(18),
                Name               varchar(255),
                EmailAddress       varchar(255),
                Phone              varchar(50),
                Company            varchar(255),
                CaseType           varchar(255),
                Status             varchar(255),
                CaseReason         varchar(255),
                CaseOrigin         varchar(255),
                Subject            varchar(255),
                Priority           varchar(255),
                Description        varchar(max),
                Closed             boolean,
                ClosedDate         timestamp,
                Escalated          boolean,
                OwnerID            varchar(18),
                CreatedDate        timestamp,
                CreatedByID        varchar(18),
                LastModifiedDate   timestamp,
                LastModifiedByID   varchar(18),
                SystemModstamp     timestamp,
                ContactPhone       varchar(50),
                ContactMobile      varchar(50),
                ContactEmail       varchar(255),
                ContactFax         varchar(50),
                InternalComments   text,
                LastViewedDate     timestamp,
                LastReferencedDate timestamp,
                CustomCreateDate   timestamp
                )      
            """)
            
            conn.commit() 
            cur.execute(""" 
                CREATE TABLE IF NOT EXISTS ods.lead
                (
                LeadID                  varchar(100),
                Deleted                 boolean,
                MasterRecordIdReference varchar(100),
                LastName                varchar(255),
                FirstName               varchar(255),
                Salutation              varchar(18),
                FullName                varchar(255),
                Title                   varchar(255),
                Company                 varchar(255),
                Street                  varchar(255),
                City                    varchar(255),
                StateProvince           varchar(255),
                ZipPostalCode           varchar(255),
                Country                 varchar(255),
                Latitude                decimal(11, 8),
                Longitude               decimal(11, 8),
                GeocodeAccuracy         varchar(255),
                Address                 varchar(255),
                Phone                   varchar(255),
                Email                   varchar(255),
                Website                 varchar(255),
                PhotoURL                varchar(255),
                Description             varchar(255),
                LeadSource              varchar(255),
                Status                  varchar(255),
                Industry                varchar(255),
                Rating                  varchar(255),
                AnnualRevenue           decimal,
                Employees               int,
                OwnerID                 varchar(100),
                Converted               boolean,
                ConvertedDate           date,
                ConvertedAccountID      varchar(100),
                ConvertedContactID      varchar(100),
                ConvertedOpportunityID  varchar(100),
                UnreadByOwner           boolean,
                CreatedDate             timestamp,
                CreatedByID             varchar(100),
                LastModifiedDate        timestamp,
                LastModifiedByID        varchar(100),
                SystemModstamp          timestamp,
                LastActivity            date,
                LastViewedDate          timestamp,
                LastReferencedDate      timestamp,
                DatacomKey              varchar(255),
                JigsawContactID         varchar(255),
                EmailBouncedReason      varchar(255),
                EmailBouncedDate        timestamp,
                IndividualID            varchar(100)
                )
            """)
            conn.commit() 
            cur.execute("""
                CREATE TABLE IF NOT EXISTS ods.opportunity
                (
                OpportunityID         varchar(18),
                Deleted               boolean,
                AccountID             varchar(255),
                Name                  varchar(255),
                Description           varchar(max),
                Stage                 varchar(255),
                Amount                int,
                ProbabilityPercentage decimal(12, 2),
                CloseDate             date,
                OpportunityType       varchar(255),
                NextStep              varchar(255),
                LeadSource            varchar(255),
                Closed                boolean,
                Won                   boolean,
                ForecastCategory      varchar(255),
                CampaignID            varchar(18),
                HasLineItem           boolean,
                PriceBookID           varchar(18),
                OwnerID               varchar(18),
                CreatedDate           date,
                CreatedByID           varchar(18),
                LastModifiedDate      date,
                LastModifiedByID      varchar(18),
                SystemModstamp        timestamp,
                LastActivity          date,
                FiscalQuarter         int,
                FiscalYear            int,
                FiscalPeriod          varchar(255),
                ContactID             varchar(18),
                LastViewedDate        timestamp,
                LastReferencedDate    timestamp,
                HasOpenActivity       boolean,
                HasOverdueTask        boolean,
                OpportunityHistoryID  varchar(18)
                )           
            """)
         
            conn.commit() 
            responseValue = 120
            responseData = {}
            responseData['Data'] = responseValue
            cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)

            conn.close()
            responseBody = {'statusCode': 200 , 'Status': 'SUCCESS' }
            responseBody = json.dumps(responseBody)
            return responseBody

    
  Primerinvoke:
    Type: AWS::CloudFormation::CustomResource
    DependsOn: LambdaRedShiftRunOnStart
    DependsOn: RedshiftCluster
    Version: "1.0"
    Properties:
      ServiceToken: !GetAtt LambdaRedShiftRunOnStart.Arn

  ## End Lambda ## 

  ## S3 Bucket Policy ## 

  RedshiftLoggingS3Policy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: RedshiftLoggingS3Policy
      PolicyDocument: 
        Version: 2012-10-17
        Statement:
          - 
            Effect: Allow
            Action: s3:ListAllMyBuckets
            Resource: arn:aws:s3:::*
          - 
            Effect: Allow
            Action: 
              - 's3:*'
            Resource: '*'
          - 
            Effect: Allow
            Action: cloudwatch:*
            Resource: "*"
      Roles:
        - !Ref RedshiftIAMRole  

  RedshiftLoggingS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref RedshiftLoggingS3Bucket
      PolicyDocument:

        Statement:
          -
            Action:
              - s3:*
            Effect: Allow
            Resource:
              - !Sub arn:aws:s3:::${S3BucketName}
              - !Sub arn:aws:s3:::${S3BucketName}/*
            Principal:
              Service: redshift.amazonaws.com
          - Effect: Allow
            Principal:
              Service: appflow.amazonaws.com
            Action:
              - s3:PutObject
              - s3:AbortMultipartUpload
              - s3:ListMultipartUploadParts
              - s3:ListBucketMultipartUploads
              - s3:GetBucketAcl
              - s3:PutObjectAcl
            Resource:
              - !Sub arn:aws:s3:::${S3BucketName}
              - !Sub arn:aws:s3:::${S3BucketName}/*
          - Sid: AllowAppFlowSourceActions
            Effect: Allow
            Principal:
              Service: appflow.amazonaws.com
            Action:
            - s3:ListBucket
            - s3:GetObject
            Resource:
              - !Sub arn:aws:s3:::${S3BucketName}
              - !Sub arn:aws:s3:::${S3BucketName}/*
              

  ## End S3 Bucket Policy ## 

  ## IAM Roles ##

  RedshiftIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Join [ "-", [!Ref 'AWS::StackName', "RedshiftSpectrumRole"] ]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action: 
            - 's3:*'
            Principal:
              Service:
                - "redshift.amazonaws.com"
            
            Action:
              - "sts:AssumeRole"

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - lambda.amazonaws.com
              - "redshift.amazonaws.com"
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:*
            Resource: arn:aws:logs:*:*:*

  ## END IAM Roles ##

  RedshiftClusterSubnetGroup:
    Type: AWS::Redshift::ClusterSubnetGroup
    Properties:
      Description: Cluster subnet group
      SubnetIds:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB

  RedshiftSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: VPC
    Properties:
      GroupDescription: Enable JDBC port
      VpcId: !Ref VPC
      SecurityGroupIngress:
        -
          CidrIp: 0.0.0.0/0
          FromPort: 5439
          ToPort: 5439
          IpProtocol: tcp
          Description: IP address for your dev machine  
  
  RedshiftCluster:
    Type: AWS::Redshift::Cluster
    DependsOn: RedshiftSecurityGroup
    DependsOn: AttachGateway
    Properties:
      ClusterSubnetGroupName: !Ref RedshiftClusterSubnetGroup
      ClusterType: !If [RedshiftSingleNodeClusterCondition, "single-node", "multi-node"]  
      NumberOfNodes: !If [RedshiftSingleNodeClusterCondition, !Ref "AWS::NoValue", !Ref NumberOfNodes]
      DBName: !Sub ${DatabaseName}
      KmsKeyId: !If [IsEncryptionAtRest, !Ref kmskey, !Ref "AWS::NoValue"]
      Encrypted: !Ref EncryptionAtRest
      MasterUserPassword: !Ref MasterUserPassword
      MasterUsername: !Ref MasterUsername
      PubliclyAccessible: true
      NodeType: !Ref NodeType
      Port: 5439
      VpcSecurityGroupIds:
        - !Sub ${RedshiftSecurityGroup}
      LoggingProperties: !If 
        - IsEnableLoggingToS3
        - BucketName: !Ref S3BucketName
          S3KeyPrefix: !Ref S3BucketPrefix
        - !Ref 'AWS::NoValue'
      IamRoles:
        - !GetAtt RedshiftIAMRole.Arn


  ConnectorProfile:
    Type: AWS::AppFlow::ConnectorProfile
    DependsOn : RedshiftCluster
    Properties:
      ConnectionMode: !Ref ConnectionModeVal
      ConnectorProfileConfig:
        ConnectorProfileProperties:
          Redshift:
            BucketName: !Ref S3BucketName
            BucketPrefix: !Ref  S3BucketPrefix
            DatabaseUrl:
              !Join [
                '',
                [
                  'jdbc:redshift://',
                  !GetAtt  RedshiftCluster.Endpoint.Address,
                  ':5439/',
                  !Ref DatabaseName,
                ],
              ]
            RoleArn: !GetAtt RedshiftIAMRole.Arn
        ConnectorProfileCredentials:
          Redshift:
            Password: !Ref MasterUserPassword
            Username: !Ref MasterUsername
      ConnectorProfileName: !Ref ConnectorProfileName
      ConnectorType: !Ref ConnectorType

Outputs:

  ConnectorType: 
    Value: !Ref ConnectorType
    Description: Type of connection 
    Export: 
      Name: "ConnectorType"

  ConnectorProfileName:
    Value : !Ref ConnectorProfileName
    Description: Connector Profile Name 
    Export:
      Name: "CPRN"

  RedshiftClusterRoleArn:
    Value: !GetAtt RedshiftIAMRole.Arn
    Description: Redshift Cluster Role Arn
    Export:
      Name: "RCRoleArn"

  DBName:
    Value: !Ref DatabaseName
    Description: DatabaseName
    Export:
      Name: "DBName"
  S3BucketName:
    Value: !Ref S3BucketName
    Description: S3 BucketName
    Export:
      Name: "S3BucketName"
  S3BucketPrefix:
    Value: !Ref S3BucketPrefix
    Description: S3 Bucket Log Prefix
    Export:
      Name: "S3BucketPrefix"

  DataBaseEndpoint:
    Value: !Sub ${RedshiftCluster.Endpoint.Address}
    Description: RedshiftCluster Database Endpoint 
    Export:
      Name: "RedshiftClusterDatabaseName"

  UserName:
    Value: !Ref MasterUsername
    Description: Master User name
    Export:
      Name: "MasterUserName"

  UserPass:
    Value: !Ref MasterUserPassword
    Description: Master User Password
    Export:
      Name: "MasterUserPassword"